// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderPickingSystem.Context;

#nullable disable

namespace OrderPickingSystem.Migrations
{
    [DbContext(typeof(OrderPickingContext))]
    [Migration("20241130201503_seed-users-with-roles")]
    partial class seeduserswithroles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OrderPickingSystem.Models.Container", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaletteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PaletteId");

                    b.ToTable("Containers");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("Items");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("Isle")
                        .HasColumnType("int");

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("PickingOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PickingOrderId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CurrentUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("RequiredRole")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Order");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("OrderPickingSystem.Models.Palette", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OngoingContainerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("PickingOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OngoingContainerId");

                    b.HasIndex("PickingOrderId");

                    b.ToTable("Palettes");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.Pick", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("PaletteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PickingOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("PickingOrderId");

                    b.ToTable("Picks");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.PickRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("PickingOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PickingOrderId");

                    b.ToTable("PickRequest");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.Reach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinationLocationId")
                        .HasColumnType("int");

                    b.Property<int>("InitialLocationId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Reaches");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.RelocateItemRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DestinationLocationId")
                        .HasColumnType("int");

                    b.Property<int>("InitialLocationId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RelocateItemRequest");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.Relocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Relocations");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CurrentOrderId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentOrderId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1000,
                            PasswordHash = "$2a$11$RfwwHJPVyQY6iC.JVefNZ.QVU/4UEVrEYpLZuu3A6nbQCj8b.QUkS",
                            Username = "Vlad"
                        },
                        new
                        {
                            Id = 1001,
                            PasswordHash = "$2a$11$gzPgmFLRvQS7UPHj.SyCGujRYji0EZqi2Mc1QuujtmiWUTIW0RNlG",
                            Username = "Alex"
                        });
                });

            modelBuilder.Entity("OrderPickingSystem.Models.UserRoleMapping", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserId", "Role");

                    b.ToTable("UserRoleMappings");

                    b.HasData(
                        new
                        {
                            UserId = 1000,
                            Role = 1
                        },
                        new
                        {
                            UserId = 1000,
                            Role = 2
                        },
                        new
                        {
                            UserId = 1001,
                            Role = 1
                        });
                });

            modelBuilder.Entity("OrderPickingSystem.Models.Orders.PickingOrder", b =>
                {
                    b.HasBaseType("OrderPickingSystem.Models.Orders.Order");

                    b.Property<string>("OngoingPaletteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OngoingPickId")
                        .HasColumnType("int");

                    b.HasIndex("OngoingPaletteId");

                    b.HasIndex("OngoingPickId");

                    b.HasDiscriminator().HasValue("PickingOrder");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.Orders.ReachingOrder", b =>
                {
                    b.HasBaseType("OrderPickingSystem.Models.Orders.Order");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasIndex("RequestId");

                    b.HasDiscriminator().HasValue("ReachingOrder");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.Orders.RelocatingOrder", b =>
                {
                    b.HasBaseType("OrderPickingSystem.Models.Orders.Order");

                    b.HasDiscriminator().HasValue("RelocatingOrder");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.Container", b =>
                {
                    b.HasOne("OrderPickingSystem.Models.Palette", null)
                        .WithMany("Containers")
                        .HasForeignKey("PaletteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderPickingSystem.Models.Item", b =>
                {
                    b.HasOne("OrderPickingSystem.Models.Location", null)
                        .WithOne("Item")
                        .HasForeignKey("OrderPickingSystem.Models.Item", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderPickingSystem.Models.Location", b =>
                {
                    b.HasOne("OrderPickingSystem.Models.Orders.PickingOrder", null)
                        .WithMany("Locations")
                        .HasForeignKey("PickingOrderId");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.Palette", b =>
                {
                    b.HasOne("OrderPickingSystem.Models.Container", "OngoingContainer")
                        .WithMany()
                        .HasForeignKey("OngoingContainerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OrderPickingSystem.Models.Orders.PickingOrder", null)
                        .WithMany("Palettes")
                        .HasForeignKey("PickingOrderId");

                    b.Navigation("OngoingContainer");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.Pick", b =>
                {
                    b.HasOne("OrderPickingSystem.Models.Container", null)
                        .WithMany("Picks")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderPickingSystem.Models.Orders.PickingOrder", null)
                        .WithMany("Picks")
                        .HasForeignKey("PickingOrderId");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.PickRequest", b =>
                {
                    b.HasOne("OrderPickingSystem.Models.Orders.PickingOrder", null)
                        .WithMany("ReplenishedRequestedItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderPickingSystem.Models.Orders.PickingOrder", null)
                        .WithMany("RequestedItems")
                        .HasForeignKey("PickingOrderId");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.User", b =>
                {
                    b.HasOne("OrderPickingSystem.Models.Orders.Order", "CurrentOrder")
                        .WithMany()
                        .HasForeignKey("CurrentOrderId");

                    b.Navigation("CurrentOrder");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.UserRoleMapping", b =>
                {
                    b.HasOne("OrderPickingSystem.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.Orders.PickingOrder", b =>
                {
                    b.HasOne("OrderPickingSystem.Models.Palette", "OngoingPalette")
                        .WithMany()
                        .HasForeignKey("OngoingPaletteId");

                    b.HasOne("OrderPickingSystem.Models.Pick", "OngoingPick")
                        .WithMany()
                        .HasForeignKey("OngoingPickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OngoingPalette");

                    b.Navigation("OngoingPick");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.Orders.ReachingOrder", b =>
                {
                    b.HasOne("OrderPickingSystem.Models.RelocateItemRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.Container", b =>
                {
                    b.Navigation("Picks");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.Location", b =>
                {
                    b.Navigation("Item")
                        .IsRequired();
                });

            modelBuilder.Entity("OrderPickingSystem.Models.Palette", b =>
                {
                    b.Navigation("Containers");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("OrderPickingSystem.Models.Orders.PickingOrder", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Palettes");

                    b.Navigation("Picks");

                    b.Navigation("ReplenishedRequestedItems");

                    b.Navigation("RequestedItems");
                });
#pragma warning restore 612, 618
        }
    }
}
